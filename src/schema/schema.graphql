## NOTE: This schema was generated by Graphback and should not be changed manually

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

type Bike {
  type: String!
  brand: String!
  color: String!
  year: String
  frame_size: String
  wheel_size: String
  photos: [String]!
}

input CreateBikeInput {
  type: String!
  brand: String!
  color: String!
  year: String
  frame_size: String
  wheel_size: String
  photos: [String]!
}

input CreateDateTimeInput {
  date: GraphbackDateTime!
  time: String
}

input CreateFeedbackInput {
  _id: GraphbackObjectID
  created_at: GraphbackDateTime!
  type: String!
  description: String!
}

input CreateRegionInput {
  latitude: Float!
  longitude: Float!
  latitudeDelta: Float
  longitudeDelta: Float
}

input CreateTheftInput {
  _id: GraphbackObjectID
  region: CreateRegionInput!
  bike: CreateBikeInput!
  comments: String
  date_time: CreateDateTimeInput!
  created_at: GraphbackDateTime!
  userId: GraphbackObjectID
}

input CreateUserInput {
  _id: GraphbackObjectID
  google_id: String!
  google_name: String!
}

type DateTime {
  date: GraphbackDateTime!
  time: String
}

"""@model(find:false, findOne:false)"""
type Feedback {
  _id: GraphbackObjectID
  created_at: GraphbackDateTime!
  type: String!
  description: String!
}

input FeedbackSubscriptionFilter {
  and: [FeedbackSubscriptionFilter!]
  or: [FeedbackSubscriptionFilter!]
  not: FeedbackSubscriptionFilter
  _id: GraphbackObjectIDInput
  created_at: GraphbackDateTimeInput
  type: StringInput
  description: StringInput
}

scalar GraphbackDateTime

input GraphbackDateTimeInput {
  ne: GraphbackDateTime
  eq: GraphbackDateTime
  le: GraphbackDateTime
  lt: GraphbackDateTime
  ge: GraphbackDateTime
  gt: GraphbackDateTime
  in: [GraphbackDateTime!]
  between: [GraphbackDateTime!]
}

scalar GraphbackObjectID

input GraphbackObjectIDInput {
  ne: GraphbackObjectID
  eq: GraphbackObjectID
  le: GraphbackObjectID
  lt: GraphbackObjectID
  ge: GraphbackObjectID
  gt: GraphbackObjectID
  in: [GraphbackObjectID!]
  between: [GraphbackObjectID!]
}

input MutateBikeInput {
  type: String
  brand: String
  color: String
  year: String
  frame_size: String
  wheel_size: String
  photos: [String]
}

input MutateDateTimeInput {
  date: GraphbackDateTime
  time: String
}

input MutateFeedbackInput {
  _id: GraphbackObjectID
  created_at: GraphbackDateTime
  type: String
  description: String
}

input MutateRegionInput {
  latitude: Float
  longitude: Float
  latitudeDelta: Float
  longitudeDelta: Float
}

input MutateTheftInput {
  _id: GraphbackObjectID
  region: MutateRegionInput
  bike: MutateBikeInput
  comments: String
  date_time: MutateDateTimeInput
  created_at: GraphbackDateTime
  userId: GraphbackObjectID
}

input MutateUserInput {
  _id: GraphbackObjectID
  google_id: String
  google_name: String
}

type Mutation {
  createUserOrSignIn(id_token: String!): User
  createTheft(input: CreateTheftInput!): Theft
  deleteTheft(input: MutateTheftInput!): Theft
  createFeedback(input: CreateFeedbackInput!): Feedback
  updateTheft(input: MutateTheftInput!): Theft
  updateFeedback(input: MutateFeedbackInput!): Feedback
  deleteFeedback(input: MutateFeedbackInput!): Feedback
  createUser(input: CreateUserInput!): User
  updateUser(input: MutateUserInput!): User
  deleteUser(input: MutateUserInput!): User
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

input PageRequest {
  limit: Int
  offset: Int
}

type Query {
  getUsersReportedThefts(id_token: String!): [Theft]
  getTheft(id: GraphbackObjectID!): Theft
  findThefts(filter: TheftFilter, page: PageRequest, orderBy: OrderByInput): TheftResultList!
}

type Region {
  latitude: Float!
  longitude: Float!
  latitudeDelta: Float
  longitudeDelta: Float
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newTheft(filter: TheftSubscriptionFilter): Theft!
  updatedTheft(filter: TheftSubscriptionFilter): Theft!
  deletedTheft(filter: TheftSubscriptionFilter): Theft!
  newFeedback(filter: FeedbackSubscriptionFilter): Feedback!
  updatedFeedback(filter: FeedbackSubscriptionFilter): Feedback!
  deletedFeedback(filter: FeedbackSubscriptionFilter): Feedback!
  newUser(filter: UserSubscriptionFilter): User!
  updatedUser(filter: UserSubscriptionFilter): User!
  deletedUser(filter: UserSubscriptionFilter): User!
}

"""@model"""
type Theft {
  _id: GraphbackObjectID
  region: Region!
  bike: Bike!
  comments: String
  date_time: DateTime!
  created_at: GraphbackDateTime!
  userId: GraphbackObjectID

  """@manyToOne(field: 'thefts', key: 'userId')"""
  user: User
}

input TheftFilter {
  _id: GraphbackObjectIDInput
  comments: StringInput
  created_at: GraphbackDateTimeInput
  userId: GraphbackObjectIDInput
  and: [TheftFilter!]
  or: [TheftFilter!]
  not: TheftFilter
}

type TheftResultList {
  items: [Theft]!
  offset: Int
  limit: Int
  count: Int
}

input TheftSubscriptionFilter {
  and: [TheftSubscriptionFilter!]
  or: [TheftSubscriptionFilter!]
  not: TheftSubscriptionFilter
  _id: GraphbackObjectIDInput
  comments: StringInput
  created_at: GraphbackDateTimeInput
  userId: GraphbackObjectIDInput
}

"""@model(find:false, findOne:false)"""
type User {
  _id: GraphbackObjectID
  google_id: String!
  google_name: String!

  """
  @oneToMany(field: 'user', key: 'userId')
  @oneToMany(field: 'user')
  """
  thefts(filter: TheftFilter): [Theft]
}

input UserSubscriptionFilter {
  and: [UserSubscriptionFilter!]
  or: [UserSubscriptionFilter!]
  not: UserSubscriptionFilter
  _id: GraphbackObjectIDInput
  google_id: StringInput
  google_name: StringInput
}