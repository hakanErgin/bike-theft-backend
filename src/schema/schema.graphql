## NOTE: This schema was generated by Graphback and should not be changed manually

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

input CreateRegionInput {
  latitude: Int!
  longitude: Int!
  latitudeDelta: Int
  longitudeDelta: Int
}

input CreateTheftInput {
  _id: GraphbackObjectID
  region: CreateRegionInput!
  comments: String
  photo: String
}

scalar GraphbackObjectID

input GraphbackObjectIDInput {
  ne: GraphbackObjectID
  eq: GraphbackObjectID
  le: GraphbackObjectID
  lt: GraphbackObjectID
  ge: GraphbackObjectID
  gt: GraphbackObjectID
  in: [GraphbackObjectID!]
  between: [GraphbackObjectID!]
}

input MutateRegionInput {
  latitude: Int
  longitude: Int
  latitudeDelta: Int
  longitudeDelta: Int
}

input MutateTheftInput {
  _id: GraphbackObjectID!
  region: MutateRegionInput
  comments: String
  photo: String
}

type Mutation {
  createTheft(input: CreateTheftInput!): Theft
  updateTheft(input: MutateTheftInput!): Theft
  deleteTheft(input: MutateTheftInput!): Theft
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

input PageRequest {
  limit: Int
  offset: Int
}

type Query {
  getTheft(id: GraphbackObjectID!): Theft
  findThefts(filter: TheftFilter, page: PageRequest, orderBy: OrderByInput): TheftResultList!
}

type Region {
  latitude: Int!
  longitude: Int!
  latitudeDelta: Int
  longitudeDelta: Int
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  in: [String!]
  contains: String
  startsWith: String
  endsWith: String
}

type Subscription {
  newTheft(filter: TheftSubscriptionFilter): Theft!
  updatedTheft(filter: TheftSubscriptionFilter): Theft!
  deletedTheft(filter: TheftSubscriptionFilter): Theft!
}

"""@model"""
type Theft {
  _id: GraphbackObjectID!
  region: Region!
  comments: String
  photo: String
}

input TheftFilter {
  _id: GraphbackObjectIDInput
  comments: StringInput
  photo: StringInput
  and: [TheftFilter!]
  or: [TheftFilter!]
  not: TheftFilter
}

type TheftResultList {
  items: [Theft]!
  offset: Int
  limit: Int
  count: Int
}

input TheftSubscriptionFilter {
  and: [TheftSubscriptionFilter!]
  or: [TheftSubscriptionFilter!]
  not: TheftSubscriptionFilter
  _id: GraphbackObjectIDInput
  comments: StringInput
  photo: StringInput
}